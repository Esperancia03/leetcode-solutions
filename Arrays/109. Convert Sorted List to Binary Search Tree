/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {

        //check if the list is empty
        if(!head) return nullptr;
        //chech if their is only the head inside the list
        if(!head->next) return new TreeNode(head->val);

        //if there is more elements 
        ListNode* prev= nullptr; //that will will the node that is befor the mid
        ListNode* mid_tracker= head; // stop when we find the mid of the list
        ListNode* fast= head; //that we atop once we reach the end of the list

        while(fast && fast->next)
        {
            prev= mid_tracker;
            mid_tracker= mid_tracker->next;
            fast = fast->next->next;
        }

        //separate the left side with the list
        if(prev) prev->next= nullptr;
    

        //then create a new tree with the middle value that will start with the root
        TreeNode* root = new TreeNode(mid_tracker->val);

        root->left = sortedListToBST(head);
        root->right = sortedListToBST(mid_tracker->next);

        return root;

        
    }
};
